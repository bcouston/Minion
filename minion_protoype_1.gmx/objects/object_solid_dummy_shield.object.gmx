<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>dummy_shield</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// btn_instance is a creation code variable - determines which buttons the dummy shields are linked to
// stun_shield is a creation code variable - determines whether a shield can bash/stun the player
// inverted is a creation code variable - determines which side shield face when button pressed

triggered = false
shield_orient = "set"
prev_shield_orient = "right"
rotation_interval = 30
shield_stun_timer = -1
upcut_stun_timer = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (shield_stun_timer &lt;= 0) {
    shield_stun_timer = -1;
} else {
    shield_stun_timer -= 1;
}

if (upcut_stun_timer &gt; 0) {
    upcut_stun_timer -= 1
} else if (upcut_stun_timer != -1) {
    upcut_stun_timer = -1
    shield_orient = prev_shield_orient
    with (instance_nearest(x, y, object_dummy_shield_collision)) {
        mask_index = dummy_shield_collision
    }
}

if ((instance_find(object_large_button, btn_instance).pressed) &amp;&amp; (shield_orient != "up")) {
    triggered = true
    if (!inverted) {
        shield_orient = "right"
    } else {shield_orient = "left"}
} else if ((instance_find(object_large_button, btn_instance + 1).pressed) &amp;&amp; (shield_orient != "up")) {
    triggered = false
    if (!inverted) {
        shield_orient = "left"
    } else {shield_orient = "right"}
}

if (sprite_index == dummy_shield) &amp;&amp; (shield_orient == "right") {
    //if (image_angle == 0) {
        //shield_orient = "set"
    //} else {
        //image_angle += rotation_interval
    //}
    image_angle = 0
}

if (sprite_index == dummy_shield) &amp;&amp; (shield_orient == "left") {
    //if (image_angle &gt;= 180) {
        //shield_orient = "set"
    //} else {
        //image_angle -= rotation_interval
    //}
    image_angle = 180
}


if (stun_shield) {

    if ((sprite_index == dummy_shield_push_r) || (sprite_index == dummy_shield_push_l)) &amp;&amp; (image_index == image_number - 1) {
        sprite_index = dummy_shield
    }
    
    if ((sprite_index == dummy_shield) || (sprite_index == dummy_shield_charge_r) || (sprite_index == dummy_shield_charge_l)) &amp;&amp; ((object_player.bbox_bottom &lt;= bbox_bottom) &amp;&amp; (object_player.bbox_bottom &gt;= bbox_top)) {
        if ((object_player.x - x) &lt;= 30) &amp;&amp; ((object_player.x - x) &gt;= 0){
            if (shield_stun_timer == -1) {
                shield_stun_timer = 70
            }
            if (shield_stun_timer == 30) {
                sprite_index = dummy_shield_charge_r
                audio_play_sound(shield_bash_wind_up, 1, false)
            }
            if (shield_stun_timer == 1) {
                image_angle = 0
                sprite_index = dummy_shield_push_r
                object_player.stunned = "left"
                global.player_disable = true
                audio_play_sound(shield_bash,1,false)
            }
        } else if ((object_player.x - x) &gt;= -30) &amp;&amp; ((object_player.x - x) &lt;= 0) {
            if (shield_stun_timer == -1) {
                shield_stun_timer = 70
            }
            if (shield_stun_timer == 30) {
                sprite_index = dummy_shield_charge_r
            }
            if (shield_stun_timer == 1) {
                image_angle = 0
                sprite_index = dummy_shield_push_l
                object_player.stunned = "right"
                global.player_disable = true
                audio_play_sound(shield_bash,1,false)
            }
        } else {
            //shield_stun_timer = -1
        }
        //((object_player.x - x) &gt;= -50) &amp;&amp; 
    } else {
        //shield_stun_timer = -1
    }
}

// fully charged uppercut - break shield
if (object_player.full_uppercut == 1) &amp;&amp; (place_meeting(x, y, object_player_combat_hitbox))  {
    instance_destroy()
} else if (object_player.full_uppercut == 0) &amp;&amp; (place_meeting(x, y, object_player_combat_hitbox)) &amp;&amp; (upcut_stun_timer == -1) {
    image_angle = 90
    prev_shield_orient = shield_orient
    shield_orient = "up"
    upcut_stun_timer = 80
    with (instance_nearest(x, y, object_dummy_shield_collision)) {
        mask_index = dummy_shield_collision_stunned  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
