<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>murray_idle_r</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>boss_health = 100

phase = 1
max_rebounds = 1
reset_beam_timer = 30
next_beam_timer = -2
fire_beam_timer = -1
jump_timer = 600
jump_direction = 1
jump_aim_point_x = 0
pause_jump_timer = false
emit_reset_beam = true
// Position at the very beginning of the boss fight
very_start_pos_x = x
// Start position that changes after jumping
start_pos_x = x
start_pos_y = y
jump_pos_x = -1
animation_direction = 1

// Movement animation
//timeline_index = animation_boss_1;
//timeline_position = 0;
//timeline_running = true;
//timeline_loop = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (phase) {
    case 1: max_rebounds = 1; break;
    case 2: max_rebounds = 3; break;
    case 3: max_rebounds = 3; break;
}

if !(instance_exists(object_sword_beam)) {
    emit_reset_beam = true
} else {emit_reset_beam = false}

if (instance_exists(object_player)) &amp;&amp; (object_player.invulnerable_timer == -1) &amp;&amp; (jump_timer != -1) {
    if (phase == 1) {
        if ((reset_beam_timer &lt;= 0) &amp;&amp; (emit_reset_beam)) || (next_beam_timer == -1) {
            reset_beam_timer = 30
            //next_beam_timer = 120
            beam = instance_create(x,y,object_sword_beam)
            with (beam) {
                beam_type = 0
                //shield_beam = irandom(4)
                //hspeed = 4
            }
            fire_beam_timer = 20
            audio_play_sound(beam_fire,1,0)
        }
    } else if (phase == 2) {
        if ((reset_beam_timer &lt;= 0) &amp;&amp; (emit_reset_beam)) || (next_beam_timer == -1) {
            reset_beam_timer = 30
            //next_beam_timer = 90
            beam = instance_create(x,y,object_sword_beam)
            with (beam) {
                beam_type = 0
                //shield_beam = irandom(4)
                //hspeed = 4
            }
            fire_beam_timer = 20
            audio_play_sound(beam_fire,1,0)
        }
    } else if (phase == 3) {
        if ((reset_beam_timer &lt;= 0) &amp;&amp; (emit_reset_beam)) || (next_beam_timer == -1) {
            reset_beam_timer = 30
            timeline_index = boss_1_phase_3_beams;
            timeline_position = 0;
            timeline_running = true;
        }
    }
    /*if ((reset_beam_timer &lt;= 0) &amp;&amp; (emit_reset_beam)) || (next_beam_timer &lt;= 0) {
        reset_beam_timer = 30
        next_beam_timer = 90
        beam = instance_create(x,y,object_sword_beam)
        with (beam) {
            beam_type = irandom(3)
            shield_beam = irandom(4)
            //hspeed = 4
        }
        fire_beam_timer = 20
        audio_play_sound(beam_fire,1,0)
        emit_reset_beam = false
    } else if (emit_reset_beam) {reset_beam_timer -= 1}
    */
}

if (instance_exists(object_player)) &amp;&amp; (!instance_exists(object_shockwave_attack)) &amp;&amp; (object_player.invulnerable_timer) == -1 &amp;&amp; (distance_to_point(object_player.x,y) &lt; 64) &amp;&amp; (jump_timer != -1) {
    instance_create(x,y+20,object_shockwave_attack)
}

if (next_beam_timer &lt;= 0) {
    next_beam_timer = 90
} else {
    next_beam_timer -= 1
}

if (reset_beam_timer == 0) {
    reset_beam_timer = -1
} else if (emit_reset_beam &amp;&amp; reset_beam_timer != -1)  {
    reset_beam_timer -= 1
}

// Stand still when firing beam
if (fire_beam_timer == 0) {
    fire_beam_timer = -1
} else if (fire_beam_timer != -1) {
    fire_beam_timer -= 1
    hspeed = 0
}

// When at -1 jump to other side of screen
if (jump_timer == 0) {
    jump_timer = -1
} else if (jump_timer != -1 &amp;&amp; !pause_jump_timer) {
    jump_timer -= 1
}

// Moving animation up to 50 right from start
if (fire_beam_timer == -1) {
    if ((jump_direction * x) &lt; (jump_direction * (start_pos_x + (jump_direction * 50)))) {
        if ((jump_direction * x) &lt; (jump_direction * start_pos_x)) {
            animation_direction = 1   
        }
    } else {
        animation_direction = -1
    }
    hspeed = 0.5 * animation_direction * jump_direction
}

// Jump to other side of screen
if (jump_timer == -1) {
    if (jump_pos_x == -1) {
        jump_pos_x = x
        if (jump_direction == 1) {
            jump_aim_point_x = object_boss_room_boundary_r.x - 72
        } else {
            jump_aim_point_x = very_start_pos_x  
        }
    }
    half_jump_distance = ((jump_aim_point_x - jump_pos_x)/2)
    jump_middle_point_x = (jump_aim_point_x - half_jump_distance)
    new_x = jump_middle_point_x - x
    speed = 6 + (8 * ((distance_to_point(jump_middle_point_x, y) + 0.01) / abs(half_jump_distance)))
    //show_message(speed)
    //if new_x == 0 {
    //    new_x = 1
    //}
    gradient = 0.006 * new_x
    new_angle = arctan2(gradient,1) * (180/pi)
    if (jump_direction == 1) {
        direction = new_angle
    } else {direction = new_angle - 180}
    //show_message(direction)
    if (distance_to_point(jump_aim_point_x,object_boss_room_boundary_d.y - 20) &lt; speed/6)  {
        x = jump_aim_point_x
        y = object_boss_room_boundary_d.y - 20
        jump_timer = 600
        jump_pos_x = -1
        start_pos_x = x
        jump_direction = jump_direction * -1
        speed = 0
        image_xscale = image_xscale * -1
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
