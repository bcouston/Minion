<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>knight_idle_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    direction_facing = "right"
    move_speed = 2
    player_attack_range = 40
    player_damage_range = 10
    beam_range = 200
    beam_delay = 40
    attack_timer = -1
    attack_range_timer = -1 
    beam_attack_timer = -1
    attack_interval = 10
    attack_range = 10
    y_range = 10
    attack = false
    attack_or_beam = "attack"
    within_range = false //Used so attack doesn't carry onto movement stage after player comes within movement range
    player_previous_position_l = false //used for when player has changed sides of the knight, opening him for confusion
    player_previous_position_r = true
    confused_timer = -1 //time when boss is confused and vulnerable to backstab
    confused_interval = 30 // How long boss is in confused state
    hurt = false // Whether hurt
    hurt_timer = -1 // How long in hurt state
    charge_timer = -1 //Charge up a stage
    complete_charge_timer = -1 //How long it takes to get to the complete charge stage
    up_stage = false // whether in process of going up stage
    stage = 1 //current stage
    dodge_timer = -1 //boolean for stage 2 confusion
    dodge = true //boolean for whether attack hits player or not during time period
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{

    // Direction
    
     if (object_player.x - x &gt; 0 &amp;&amp; attack_range_timer == -1 &amp;&amp; attack_timer == -1 &amp;&amp; confused_timer == -1) {direction_facing = "right"}
     if (object_player.x - x &lt; 0 &amp;&amp; attack_range_timer == -1 &amp;&amp; attack_timer == -1 &amp;&amp; confused_timer == -1) {direction_facing = "left"}

    // Animation
    
    if attack == true {
        hspeed = 0
        if image_index == image_number - 1 {
            attack = false
            if direction_facing == "right" {
                sprite_index = knight_prone_still_r
            } else {sprite_index = knight_prone_still_l}
            //attack_timer = attack_interval
        }
    }

    // --- Timers ---
    
    // Attack rate
    
    if (attack_timer &lt;= 0) {
      attack_timer = -1;
    } else {
      attack_timer -= 1;
    }
    
    // Confusion
    
    if (confused_timer &lt;= 0) {
      confused_timer = -1;
    } else {
      confused_timer -= 1;
    }
    
    // Charge
    
    if (charge_timer &lt;= 0) {
      charge_timer = -1;
    } else {
      charge_timer -= 1;
    }

    //Charge - Complete charge state
        
    if (complete_charge_timer &lt;= 0) {
      complete_charge_timer = -1;
    } else {
      complete_charge_timer -= 1;
    }
    
    //Stage 2 - dodge
    
    if (dodge_timer &lt;= 0) {
      dodge_timer = -1;
    } else {
      dodge_timer -= 1;
    }
    
    if !up_stage {
        
        //Has not dodged if player is damaged
        if object_player.hurt {
            dodge = false
        }
        
        //Boolean decision for stage 2 to decide if player has dodged attack
        if dodge {
            if (attack_range_timer != -1 || attack_timer != -1) {
                if (object_player.y - y &lt; (-1 * y_range)) {
                    if dodge_timer == -1 {
                        dodge_timer = 50
                    }
                }
            }
        }
        
        // Attack player when in range
        
        if (attack_range_timer != -1 &amp;&amp; attack_range_timer &lt;= 0) {
          attack_range_timer = -1
          
          //Attack
          
          if direction_facing == "right" {
            attack = true
            attack_timer = attack_interval
            if attack_or_beam == "attack" {
                sprite_index = knight_attack_1_r
                if place_meeting(x+player_damage_range,y,object_player) {
                    object_player.hurt = true
                    object_player.damage_object_pos[0] = x
                    object_player.damage_object_pos[1] = y
                }
            } else { //=beam
                sprite_index = knight_attack_2_r
                instance_create(x, y, object_sword_blast_r)
                audio_play_sound(beam_1, 10, false)
            }
          } else {
            attack = true
            attack_timer = attack_interval
            if attack_or_beam = "attack" {
                sprite_index = knight_attack_1_l
                  if place_meeting(x-player_damage_range,y,object_player) {
                    object_player.hurt = true
                    object_player.damage_object_pos[0] = x
                    object_player.damage_object_pos[1] = y
                }
            } else {
                sprite_index = knight_attack_2_l
                instance_create(x, y, object_sword_blast_l)
                audio_play_sound(beam_1, 10, false)
            }
          }
          
        } else if attack_range_timer != -1 {
          attack_range_timer -= 1;
        }
        
        //Shoot beam when not in range
        
        if (object_player.x - x &gt;= beam_range || x - object_player.x &gt;= beam_range) {
            within_range = false
            attack_or_beam = "beam"
             if attack_range_timer == -1 {
                attack_range_timer = beam_delay
             }       
        } else {
            attack_or_beam = "attack"
        }
        
        //-----CONFUSION-----
        
        if confused_timer != -1 {
            if player_previous_position_r {
                sprite_index = knight_idle_2_l
            } else {
                sprite_index = knight_idle_2_r
            }
            hspeed = 0
        }
          
        
        //-----MOVEMENT-----
        
            
        //Player has jumped over - confusion (on player landing)
        
        if object_player.x &gt; x &amp;&amp; (object_player.y - y &gt;= (-1 * y_range)) &amp;&amp; confused_timer == -1 {
            if !player_previous_position_r {
                if ( (stage == 1) || (stage == 2 &amp;&amp; dodge_timer != -1) ) {
                    dodge_timer = -1
                    confused_timer = confused_interval
                    audio_play_sound(sword_impact_1, 10, false)
                }
                player_previous_position_r = true
                player_previous_position_l = false
                dodge = true
                //direction_facing = "left"
            }
        }
        
        if object_player.x &lt; x &amp;&amp; (object_player.y - y &gt;= (-1 * y_range)) &amp;&amp; confused_timer == -1 {
            if !player_previous_position_l {
                if ( (stage == 1) || (stage == 2 &amp;&amp; dodge_timer != -1) ) {
                    dodge_timer = -1
                    confused_timer = confused_interval
                    audio_play_sound(sword_impact_1, 10, false)
                }
                player_previous_position_l = true
                player_previous_position_r = false
                dodge = true
                //direction_facing = "right"
            }
        }
        
        //
        
        if (attack_timer == -1 || attack_or_beam = "beam") &amp;&amp; hurt_timer == -1 {
            
            if (confused_timer == -1) {
            
                // Stationary and attack if player in range
                
                if (object_player.x - x &lt;= player_attack_range) &amp;&amp;
                    (object_player.x - x &gt;= (-1 * player_attack_range)) &amp;&amp;
                    (object_player.y - y &gt;= (-1 * y_range)) {
                    attack_or_beam = "attack"
                    if attack_range_timer == -1 {
                        attack_range_timer = attack_range
                    }
                }
                
                // Movement towards player horizontally
            
                else if ( (object_player.x - x &lt; beam_range) &amp;&amp; (object_player.x - x &gt; -1 * beam_range) ) {
                
                    if !within_range {
                        attack_range_timer = -1
                        attack_timer = -1
                        within_range = true
                    }
                    if (object_player.x &gt; x) &amp;&amp; (object_player.y - y &gt;= (-1 * y_range)) {
                        hspeed = move_speed
                        direction_facing = "right"
                        sprite_index = knight_prone_move_r
                    }
                    else if (object_player.x &lt; x) &amp;&amp; (object_player.y - y &gt;= (-1 * y_range)) {
                        hspeed = -1 * move_speed
                        direction_facing = "left"
                        sprite_index = knight_prone_move_l
                    }
                
                }
            
            }
        
        }
        
        //Damage
        
        if (sprite_index == knight_idle_2_r &amp;&amp; object_player.attack &amp;&amp; place_meeting(x-player_damage_range,y,object_player)) ||
            (sprite_index == knight_idle_2_l &amp;&amp; object_player.attack &amp;&amp; place_meeting(x+player_damage_range,y,object_player)) {
            if (hurt_timer &lt; 0) {
                audio_play_sound(sword_impact_1, 10, false)
                if random(1) &lt; 0.5 {audio_play_sound(boss_grunt_1, 10, false)} else {audio_play_sound(boss_grunt_2, 10, false)}
                confused_timer = -1
                hurt_timer = 50 //Length of hurt state
                object_boss_hp.current_health -= 20
            }
        }
        
        if (hurt_timer == 0) {
            //hurt = false
            hurt_timer = -1;
        }
        else if (hurt_timer != -1) {
            hurt_timer -= 1; 
            if (sprite_index == knight_idle_2_r) {
                sprite_index = knight_damage_r
            } else if (sprite_index == knight_idle_2_l) {
                sprite_index = knight_damage_l
            }
        }
    
    //Charge up - to Stage 2
    
    } else if up_stage {
        //Set timers
        if stage == 1 {
            charge_timer = 100
            complete_charge_timer = 150
            stage += 1
        }
        //Stage 2
        if stage == 2 {
            if charge_timer == 100 {
                sprite_index = knight_charge
                audio_play_sound(stage_charge, 10, false)
            } else if complete_charge_timer == 50 {
                sprite_index = knight_charge_complete
                audio_play_sound(power_beam, 10, false)
                audio_play_sound(boss_warcry_, 10, false)
            }
        }
        if complete_charge_timer &lt;= 0 {
            up_stage = false
            move_speed++
        }
        
    }
    
    //Damage player if touch and not confusion
    if place_meeting(x,y,object_player) &amp;&amp; confused_timer == -1 {
        object_player.hurt = true
        object_player.damage_object_pos[0] = x
        object_player.damage_object_pos[1] = y
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
