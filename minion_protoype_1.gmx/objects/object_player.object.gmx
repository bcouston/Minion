<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>moe_walk_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    platform_collisions_create(16);
    wall_l_jump_timer = -1;
    wall_r_jump_timer = -1;
    
    //audio_play_sound(darkworld, 10, false)
    
    D = "rig"
    
    //Attacking
    fight = true
    attack = false
    attack_animation = 2
    moe_damage = 20
    
    //Animation
    moe_run_r = moe_run_right
    moe_run_l = moe_run_left
    
    //Health
    moe_health = 100
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    // Horizontal speed control
    if hspeed &gt; 12 {
        hspeed = 12
    }
    
    // --- ANIMATION ---
    
    // Idle/Fight Animation
    if fight == false {
        moe_run_r = moe_run_right
        moe_run_l = moe_run_left
    } else {
        moe_run_r = moe_run_right_wood_sword
        moe_run_l = moe_run_left_wood_sword
    }
    
    // Animation for jumping freeze
    if((sprite_index == moe_jump_right || sprite_index == moe_jump_left) &amp;&amp; image_index == 5) {
        image_speed = 0
        // Taking care of aereal attacks
        //if attack = true {
        //    gravity = 0
        //    vspeed = 0
        //    alarm[0]=room_speed*22
        //    gravity = 5
        //}
    } else {image_speed = 1}
    
    // Animation for attacking
     if((sprite_index == moe_attack_wood_sword_right_1 || moe_attack_wood_sword_right_2 || moe_attack_wood_sword_right_3) &amp;&amp; image_index == 11) {
        sprite_index = moe_walk_right
        attack = false
     }

    // Timer set - now redundant - keeping for possible future use
    if (wall_l_jump_timer &lt;= 0) {
      wall_l_jump_timer = -1;
    } else {
      wall_l_jump_timer -= 1;
      hspeed = 6
    } 
    if (wall_r_jump_timer &lt;= 0) {
      wall_r_jump_timer = -1;
    } else {
      wall_r_jump_timer -= 1;
      hspeed = -6
    }     
    
    // Collisions
    platform_collisions_step(object_solid)
    
    // Gravity when jumping, in contact with a wall and on the floor, with animations
   
    if (place_free(x,y+1)){
        gravity = 0.8;
            if D == "lef" {
                if !(place_meeting(x-1,y,object_solid)) {
                    sprite_index = moe_jump_left
                } else {sprite_index = moe_wall_grab_left}
            } else {
                if !(place_meeting(x+1,y,object_solid)) {
                    sprite_index = moe_jump_right
                } else {sprite_index = moe_wall_grab_right}
            }
        if (place_meeting(x+1,y,object_solid) || place_meeting(x-1,y,object_solid)) &amp;&amp; (vspeed &gt; 0) {
            gravity = 0.1;
        }
    } else {
        gravity = 0;
         if (sprite_index == moe_jump_right || sprite_index = moe_wall_grab_right) {
            sprite_index = moe_walk_right
        }
        if (sprite_index == moe_jump_left || sprite_index = moe_wall_grab_left) {
            sprite_index = moe_walk_left
        }
    }
    
    // L/R movement and jumping
    if keyboard_check(ord('D')) &amp;&amp; attack == false
         {
         D = "rig"
         if place_free(x+1,y) {
            // Air movement
            if place_free(x,y+1) {
                if hspeed &lt;= 4 {
                    hspeed += 1
                }
            // Ground movement
            } else {
                hspeed = 4;
                sprite_index = moe_run_r
            }
        } if !place_free(x+2,y) &amp;&amp; !place_free(x,y+1) {
            sprite_index = moe_walk_right
        }
    }
    if keyboard_check_released(ord('D')) &amp;&amp; !place_free(x,y+1) {
        sprite_index = moe_walk_right
    }
    
    if keyboard_check(ord('A'))  &amp;&amp; attack == false
         {
         D = "lef"
         if place_free(x-1,y) {
             // Air movement
            if place_free(x,y+1) {
                if hspeed &gt;= -4 {
                    hspeed -= 1;
                }
            // Ground movement
            } else {
                hspeed = -4;
                sprite_index = moe_run_l
            }
        } if !place_free(x-2,y) &amp;&amp; !place_free(x,y+1) {
            sprite_index = moe_walk_left
        }
    }
    if keyboard_check_released(ord('A')) &amp;&amp; !place_free(x,y+1) {
        sprite_index = moe_walk_left
    }
    
    // Jump
    if keyboard_check_pressed(ord('W')) {
        // Wall jump
        if place_free(x,y+1) &amp;&amp; place_free(x,y-1) {
            if place_meeting(x+1,y,object_solid) {
                vspeed = -10
                hspeed = -6
                D = "lef"
                wall_r_jump_timer = 15;
            }
            if place_meeting(x-1,y,object_solid) {
                vspeed = -10
                hspeed = 6
                D = "rig"
                wall_l_jump_timer = 15;
            }
            // Normal jump
        } else {
            if !place_free(x,y+1) &amp;&amp; place_free(x,y-1) {
                vspeed = -10
            }
        }
    }
    
    // Static friction
    if ((!keyboard_check(ord('D'))) &amp;&amp; (!keyboard_check(ord('A')))) {
        platform_friction(1,true);
    } else {
        platform_friction(1,false);
    }
    
    // Sword attack
    
    // Right
    if keyboard_check_pressed(vk_right) {
        // Put attack sprites in array?
        if (sprite_index != moe_attack_wood_sword_right_1 &amp;&amp; sprite_index != moe_attack_wood_sword_right_2 &amp;&amp; sprite_index != moe_attack_wood_sword_right_3) {
            D = "rig"
            attack = true
            attack_animation++
            if (attack_animation mod 3 == 0) {
                sprite_index = moe_attack_wood_sword_right_1
            } else if  (attack_animation mod 3 == 1) {
                sprite_index = moe_attack_wood_sword_right_2
            } else {sprite_index = moe_attack_wood_sword_right_3}
        }
        
        if place_meeting(x+1,y,object_badguy1){
            object_badguy1.baddie_health -= moe_damage
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
