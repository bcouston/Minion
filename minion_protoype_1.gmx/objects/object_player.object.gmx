<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>moe_walk_sword_left</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    platform_collisions_create(100);

    //Constants

    attack_interval = 10
    attack_a_interval = 15
    no_of_aerial_attacks = 2
    player_damage_range = 24
    wall_jump_speed = 6
    wall_jump_interval = 15
    run_speed = 5
    footsteps_interval = 8

    //Collisions
    wall_jump = false
    wall_grind_start = false
    
    //Movement
    // Hspeed is reset after contacting sloped service, thus slope_speed
    // is used as a temporary store for previous step speed checking
    slope_speed = 0
    jump = false
    D = "rig"

    //Timers

    wall_l_jump_timer = -1;
    wall_r_jump_timer = -1;

    attack_timer = -1
    attack_a_timer = -1;
    
    footsteps_timer = -1
    
    // Music
    audio_play_sound(vampire_killer, 6, false)

    //Attacking

    fight = true
    attack = false
    attack_animation = 2
    moe_damage = 10
    attack_range = 16
    // Detects if player has run out of attacks after executing aerial attacks
    attacks_left = false
    // Aerial
    aerial_attacks_completed = 0
    

    //Actions

    action = false

    //Animation
    moe_run_r = moe_run_right
    moe_run_l = moe_run_left
    animation_change = true

    //Initialize attack animations array
    attack_ani[0] = moe_attack_wood_sword_right_1
    attack_ani[1] = moe_attack_wood_sword_left_1
    attack_ani[2] = moe_attack_wood_sword_right_2
    attack_ani[3] = moe_attack_wood_sword_left_2
    attack_ani[4] = moe_attack_wood_sword_right_3
    attack_ani[5] = moe_attack_wood_sword_left_3
    attack_ani[6] = moe_attack_aerial_wood_sword_right_1
    attack_ani[7] = moe_attack_aerial_wood_sword_left_1
    attack_ani[8] = moe_attack_aerial_wood_sword_right_2
    attack_ani[9] = moe_attack_aerial_wood_sword_left_2

    //Health
    moe_health = 100

    //Coordinates for moving away from source of damage
    damage_object_pos[0] = 0
    damage_object_pos[1] = 0
    hurt = false
    hurt_timer = -1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>721</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_health</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{

    // Bugs to fix

    // descent animation stays around too long when attacking as soon as you hit ground

    // Horizontal speed control
    if hspeed &gt; 12 {
        hspeed = 12
    }
    
    // --- SOUND ---


    //--- DAMAGE ---
    damage = false
    

    // --- ANIMATION ---

    // Idle/Fight Animation
    if animation_change == true {
        if fight == false  {
            moe_walk_r = moe_walk_right
            moe_walk_l = moe_walk_left
    
            moe_run_r = moe_run_right
            moe_run_l = moe_run_left
    
            moe_jump_r = moe_jump_right
            moe_jump_l = moe_jump_left
            moe_jump_descent_r = moe_jump_descent_right
            moe_jump_descent_l = moe_jump_descent_left
    
            moe_wall_grab_r = moe_wall_grab_right
            moe_wall_grab_l = moe_wall_grab_left
        } else {
            moe_walk_r = moe_walk_sword_right
            moe_walk_l = moe_walk_sword_left
            //moe_walk_r = moe_sleepy_still_right
            //moe_walk_l = moe_sleepy_still_left
    
            moe_run_r = moe_run_right_wood_sword
            moe_run_l = moe_run_left_wood_sword
            //moe_run_r = moe_sleepy_walk_right
            //moe_run_l = moe_sleepy_walk_left
    
            moe_jump_r = moe_jump_right_wood_sword
            moe_jump_l = moe_jump_left_wood_sword
            moe_jump_descent_r = moe_jump_descent_right_wood_sword
            moe_jump_descent_l = moe_jump_descent_left_wood_sword
    
            moe_wall_grab_r = moe_wall_grab_right_wood_sword
            moe_wall_grab_l = moe_wall_grab_left_wood_sword
        }
        animation_change = false
    }

    // Animation for jumping freeze
    if((sprite_index == moe_jump_r || sprite_index == moe_jump_l) &amp;&amp; (image_index == image_number - 1) ) {
        image_speed = 0
    } else {image_speed = 1}

    // Animation for attack ceasing
    if ( (attack_timer &lt;= attack_interval - 1) &amp;&amp; attack == true) {
         if (image_index == image_number - 1) {
            image_speed = 0
         }
         // Attack timer has depleted and on last frame of attack animation
         if (attack_timer == -1 &amp;&amp; image_index == image_number - 1) {
            attack = false
            image_speed = 1
         }
    }
    
    // --- Timers ---

    // Wall jump speed

    if (wall_l_jump_timer &lt;= 0) {
      wall_l_jump_timer = -1;
    } else {
      wall_l_jump_timer -= 1;
      hspeed = wall_jump_speed
    }
    if (wall_r_jump_timer &lt;= 0) {
      wall_r_jump_timer = -1;
    } else {
      wall_r_jump_timer -= 1;
      hspeed = -1 * wall_jump_speed 
    }

    // Puts Moe in an "attack phase" while he is still attacking within a certain interval
    if (attack_timer &lt;= 0) {
        attack_timer = -1;
    } else {
        attack_timer -= 1;
    }

    // Aerial attack freeze
    if (attack_a_timer == 0) {
        attack_a_timer = -1;
        image_speed = 1
    } else if (attack_a_timer != -1) {
        attack_a_timer -= 1;
        if (image_index == image_number - 1) {
            image_speed = 0
         }
    }
    
    // Footsteps
    if (footsteps_timer == 0) {
        footsteps_timer = footsteps_interval
    } else if (footsteps_timer &gt; 0) {
        if (footsteps_timer == footsteps_interval) {
            //Audio
            audio_sound_pitch(footstep, random_range(1.0,1.4))
            audio_play_sound(footstep, 1, false)
            //Particles
            instance_create(x, bbox_bottom, object_walk_dust_part)
        }
        footsteps_timer -= 1
    }
    
    // Keep track of how many aerial attacks have elapsed
    if (aerial_attacks_completed == no_of_aerial_attacks) {
        attacks_left = false;
    }
        
    //Wall jump collision
    if (!place_free(x+1,y) || !place_free(x-1,y)) {
        wall_jump = false
        aerial_attacks_completed = 0
        attacks_left = true
    }

    // --- Gravity when attacking in air, when attacking on ground, when jumping, in contact with a wall and on the floor, with animations ---

    // Found wood sword in chest
    if (object_chest_wood_sword.open) {
        gravity = 0
        hspeed = 0
        vspeed = 0
        sprite_index = moe_find_wood_sword
    }
    // Moe is hurt
    else if hurt == true {
        if (hurt_timer &lt; 0) {hurt_timer = 10}
    }
    // If attacking and not wall jump
    else if (attack_a_timer != -1 &amp;&amp; place_free(x,y+1) &amp;&amp; wall_jump == false) {
        gravity = 0
        vspeed = 0
        hspeed = 0
    // If attacking and wall jump
    } else if (attack == true &amp;&amp; attack_a_timer != -1 &amp;&amp; place_free(x,y+1) &amp;&amp; wall_jump == true) {
        gravity = 0.8
    // If attacking on ground
    } else if (attack == true &amp;&amp; attack_timer != -1 &amp;&amp; !place_free(x,y+1)) {
        gravity = 0
        hspeed = 0
    }
    // If not touching ground
    else if place_free(x,y+1) {
        gravity = 0.8;
        jump = true
        footsteps_timer = -1
            if D == "lef" {
                if place_free(x-1,y) {
                    if vspeed &lt;= 0 {
                        sprite_index = moe_jump_l
                    } else {sprite_index = moe_jump_descent_l}
                } else if place_meeting(x-1,y,object_solid) {sprite_index = moe_wall_grab_l}
            } else if D == "rig" {
                if place_free(x+1,y) {
                    if vspeed &lt;= 0 {
                        sprite_index = moe_jump_r
                    } else {sprite_index = moe_jump_descent_r}
                } else if place_meeting(x+1,y,object_solid) {sprite_index = moe_wall_grab_r}
            }
        // If touching wall
        if (!place_free(x+1,y) || !place_free(x-1,y)) &amp;&amp; (vspeed &gt; 0) {
            gravity = 0.1;
            // Wall grind
            if !(wall_grind_start) {
                // Audio
                audio_play_sound(wall_grind, 1, false)
                wall_grind_start = true
            }
            // Particles
            if D == "rig" {
                instance_create(bbox_right, bbox_bottom, object_wall_grind_dust_part)
            } else if D == "lef" {
                instance_create(bbox_left, bbox_bottom, object_wall_grind_dust_part)
            }
            // Stop fall sound
             audio_stop_sound(wind_fall)
        // If aerial and not touching wall
        } else {
            wall_grind_start = false
            audio_stop_sound(wall_grind)
            // Falling sound
            if (vspeed &gt; 0) {
                if (!audio_is_playing(wind_fall)) {
                    audio_play_sound(wind_fall, 1, false)
                }
            }
        }
    // If touching ground
    } else {
        gravity = 0;
        // Attack
        aerial_attacks_completed = 0
        attacks_left = true
        // Jumping
        if (jump) {
            //Audio
            audio_sound_pitch(floor_impact, random_range(1.0,1.2))
            audio_play_sound(floor_impact, 1, false)
            //Particles
            instance_create(x, bbox_bottom, object_land_dust_part)
        }
        jump = false
        wall_jump = false
        // Wall grind
        wall_grind_start = false
        audio_stop_sound(wall_grind)
        // Stop fall sound
        audio_stop_sound(wind_fall)
        // If player is still
        if D == "rig" &amp;&amp; hspeed == 0 &amp;&amp; attack == false {
            sprite_index = moe_walk_r
            footsteps_timer = -1
        }
        else if D == "lef" &amp;&amp; hspeed == 0 &amp;&amp; attack == false {
            sprite_index = moe_walk_l
            footsteps_timer = -1
        }
    }

    // L/R movement and jumping
    if keyboard_check(ord('D')) &amp;&amp; !keyboard_check(ord('A')) &amp;&amp; attack == false
         {
         D = "rig"
                                // Additional check for sloped surface
         if place_free(x+1,y) || place_meeting(x+1,y+1,object_dungeon_slope_right) || place_meeting(x-1,y+1,object_dungeon_slope_left) {
            // Air movement
            if place_free(x,y+1) {
                if hspeed &lt;= run_speed {
                    hspeed += 1
                }
            // Ground movement
            } else {
                hspeed = run_speed;
                sprite_index = moe_run_r
                if footsteps_timer == -1 {
                    footsteps_timer = footsteps_interval
                }
            }
        } else if !place_free(x+1,y) &amp;&amp; !place_free(x,y+1) {
            sprite_index = moe_walk_r
        }
    }

    if keyboard_check(ord('A')) &amp;&amp; !keyboard_check(ord('D')) &amp;&amp; attack == false
         {
         D = "lef"
                                // Additional check for sloped surface
         if place_free(x-1,y) || place_meeting(x-1,y+1,object_dungeon_slope_left) || place_meeting(x+1,y+1,object_dungeon_slope_right) {
             // Air movement
            if place_free(x,y+1) {
                if hspeed &gt;= -1 * run_speed {
                    hspeed -= 1;
                }
            // Ground movement
            } else {
                hspeed = -1 * run_speed;
                sprite_index = moe_run_l
                if footsteps_timer == -1 {
                    footsteps_timer = footsteps_interval
                }
            }
        } else if !place_free(x-1,y) &amp;&amp; !place_free(x,y+1) {
            sprite_index = moe_walk_l
        }
    }

    // Jump
    if keyboard_check_pressed(ord('W')) &amp;&amp; attack == false {
        // Wall jump
        if place_free(x,y+1) &amp;&amp; place_free(x,y-1) {
            if place_meeting(x+10,y,object_solid) { // Some tolerance for proximity to the wall
                vspeed = -10
                hspeed = -1 * wall_jump_speed
                D = "lef"
                wall_jump = true
                jump = true
                wall_r_jump_timer = wall_jump_interval
                //Audio
                audio_sound_pitch(moe_jump, random_range(0.8,1.2))
                audio_play_sound(moe_jump, 5, false)
            }
            if place_meeting(x-5,y,object_solid) {
                vspeed = -10
                hspeed = wall_jump_speed
                D = "rig"
                wall_jump = true
                jump = true
                wall_l_jump_timer = wall_jump_interval
                //Audio
                audio_sound_pitch(moe_jump, random_range(0.8,1.2))
                audio_play_sound(moe_jump, 5, false)
            }
            // Normal jump
        } else {
            if !place_free(x,y+1) &amp;&amp; place_free(x,y-1) {
                vspeed = -10
                jump = true
                //Audio
                audio_sound_pitch(moe_jump, random_range(0.8,1.2))
                audio_play_sound(moe_jump, 5, false)
            }
        }
    // Analog jump - method sourced from info.sonicretro.org/SPG:Jumping
    } else if keyboard_check_released(ord('W')) &amp;&amp; attack == false {
        if place_free(x,y+1) &amp;&amp; vspeed &lt; -7 {
            vspeed = -7
        }
    }

    // Static friction
    if ((!keyboard_check(ord('D'))) &amp;&amp; (!keyboard_check(ord('A')))) {
        platform_friction(1,true);
    } else {
        platform_friction(1,false);
    }

    // Sword attack

    if fight {

        // Right
        if keyboard_check_pressed(vk_right) {
            if (attack_timer &lt;= 1 &amp;&amp; attack == false &amp;&amp; place_free(x+1,y) &amp;&amp; attacks_left == true) {
                D = "rig"
                attack = true
                damage = true
                // Reset image speed if not already
                image_speed = 1
                // Spawn combat invisible hitbox
                instance_create(x + attack_range, y, object_player_combat_hitbox)
                attack_timer = attack_interval
                attack_animation++
                // Audio
                audio_sound_pitch(swoosh_1, random_range(0.9,1.1))
                audio_play_sound(swoosh_1, 10, false)
                audio_stop_sound(wind_fall)
                if (aerial_attacks_completed != no_of_aerial_attacks &amp;&amp; place_free(x,y+1)) {
                    attack_a_timer = attack_a_interval
                    aerial_attacks_completed++
                }
                //if attack_a_timer != -1 {
                    if (attack_animation mod 2 == 0) {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[0]
                        } else if (attack_a_timer != -1) {sprite_index = attack_ani[6]}
                    } else if  (attack_animation mod 2 == 1) {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[2]
                        } else if (attack_a_timer != -1) {sprite_index = attack_ani[8]}
                    } else {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[4]
                        } else if (attack_a_timer != -1) {sprite_index = attack_ani[6]}
                    }
                //}
            }
        }

        // Left
        if keyboard_check_pressed(vk_left) {
            if (attack_timer &lt;= 1 &amp;&amp; attack == false &amp;&amp; place_free(x-1,y) &amp;&amp; attacks_left == true) {
                D = "lef"
                attack = true
                damage = true
                // Reset image speed if not already
                image_speed = 1
                // Spawn combat invisible hitbox
                instance_create(x - attack_range, y, object_player_combat_hitbox)
                attack_timer = attack_interval
                attack_animation++
                // Audio
                audio_sound_pitch(swoosh_1, random_range(0.9,1.1))
                audio_play_sound(swoosh_1, 10, false)
                audio_stop_sound(wind_fall)
                if (aerial_attacks_completed != no_of_aerial_attacks &amp;&amp; place_free(x,y+1)) {
                    attack_a_timer = attack_a_interval
                    aerial_attacks_completed++
                }
                //if attack_a_timer != -1 {
                    if (attack_animation mod 2 == 0) {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[1]
                        } else if (attack_a_timer != -1) {sprite_index = attack_ani[7]}
                    } else if (attack_animation mod 2 == 1) {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[3]
                        } else if (attack_a_timer != -1) {sprite_index = attack_ani[9]}
                    } else {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[5]
                        } else if (attack_a_timer != -1){sprite_index = attack_ani[7]}
                    }
                //}
            }
            
        }

        // Up
        if keyboard_check_pressed(vk_up) {
            if (attack_timer &lt;= 1 &amp;&amp; !place_free(x,y+1) &amp;&amp; place_free(x,y-1) ) {
                attack = true
                damage = true
                attack_timer = attack_interval
                sprite_index = moe_attack_wood_sword_up
                audio_play_sound(swoosh_1, 10, false)
            }
        }
    }

    if keyboard_check_pressed(vk_space) {
        action = true
    } else {action = false}

    //Damage
    if (hurt_timer == 0) {
        hurt = false
        //speed = 0
        //direction = 0
        hurt_timer = -1;
    } else if (hurt_timer != -1) {
        hurt_timer -= 1;
        //playerdirection = point_direction(x,y,damage_object_pos[0],damage_object_pos[1])
        //direction = (playerdirection + 180)
        //speed = 6
        if (x - damage_object_pos[0]) &gt; 0 {
            sprite_index = moe_damage_l
            hspeed = 6
        } else {
            sprite_index = moe_damage_r
            hspeed = -6
        }
        if place_meeting(x-1,y,object_solid) || place_meeting(x+1,y,object_solid) {hspeed=0}
    }

    // Collisions
    platform_collisions_step(object_solid)
    platform_collisions_step(object_dungeon_ground)
    platform_collisions_step(object_dungeon_stairs)
    platform_collisions_step(object_dungeon_slant)
    platform_collisions_step(object_dungeon_slope_right)
    platform_collisions_step(object_dungeon_slope_left)
    platform_collisions_step(object_gate)
    platform_collisions_step(object_shield_dummy1)
    //platform_collisions_step(object_knight_boss)
    
    // Camera movement
    camera_movement()
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
