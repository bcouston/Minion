<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>moe_walk_left</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    platform_collisions_create(16);
    
    //Constants
    
    attack_interval = 11
    attack_a_interval = 30
    
    //Collisions
    wall_jump = false
    
    //Timers
    
    wall_l_jump_timer = -1;
    wall_r_jump_timer = -1;
    
    attack_timer = -1
    attack_a_timer = -1;
    aerial_attack_executed = false;
    
    audio_play_sound(brinstar, 10, false)
    
    D = "rig"
    
    //Attacking
    
    fight = false
    attack = false
    attack_animation = 2
    moe_damage = 10
    
    //Actions
    
    action = false
    
    //Animation
    moe_run_r = moe_run_right
    moe_run_l = moe_run_left
    
    //Initialize attack animations array
    attack_ani[0] = moe_attack_wood_sword_right_1
    attack_ani[1] = moe_attack_wood_sword_left_1
    attack_ani[2] = moe_attack_wood_sword_right_2
    attack_ani[3] = moe_attack_wood_sword_left_2
    attack_ani[4] = moe_attack_wood_sword_right_3
    attack_ani[5] = moe_attack_wood_sword_left_3
    attack_ani[6] = moe_attack_aerial_wood_sword_right_1
    attack_ani[7] = moe_attack_aerial_wood_sword_left_1
    attack_ani[8] = moe_attack_aerial_wood_sword_right_2
    attack_ani[9] = moe_attack_aerial_wood_sword_left_2
    
    //Health
    moe_health = 100
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{

    // Bugs to fix
    
    // descent animation stays around too long when attacking as soon as you hit ground

    // Horizontal speed control
    if hspeed &gt; 12 {
        hspeed = 12
    }
    
    //--- DAMAGE ---
    damage = false
    
    // --- ANIMATION ---
    
    // Idle/Fight Animation
    if fight == false {
        moe_walk_r = moe_walk_right
        moe_walk_l = moe_walk_left
        
        moe_run_r = moe_run_right
        moe_run_l = moe_run_left
    } else {
        moe_walk_r = moe_walk_sword_right
        moe_walk_l = moe_walk_sword_left
        
        moe_run_r = moe_run_right_wood_sword
        moe_run_l = moe_run_left_wood_sword
    }
    
    // Animation for jumping freeze
    if((sprite_index == moe_jump_right || sprite_index == moe_jump_left) &amp;&amp; (image_index == image_number - 1) ) {
        image_speed = 0
    } else {image_speed = 1}
    
    // Animation for attack ceasing
    if ( (attack_timer &lt;= attack_interval - 1) &amp;&amp; attack == true) {
         if (image_index == image_number - 1) {
            image_speed = 0
         }
         if (attack_timer == -1) {
            attack = false
            image_speed = 1
         }
    }

    // --- Timers ---
    
    // Wall jump speed
    
    if (wall_l_jump_timer &lt;= 0) {
      wall_l_jump_timer = -1;
    } else {
      wall_l_jump_timer -= 1;
      hspeed = 6
    } 
    if (wall_r_jump_timer &lt;= 0) {
      wall_r_jump_timer = -1;
    } else {
      wall_r_jump_timer -= 1;
      hspeed = -6
    }
    
    // Puts Moe in an "attack phase" while he is still attacking within a certain interval 
    if (attack_timer &lt;= 0) {
        attack_timer = -1;
    } else {
        attack_timer -= 1;
    }
    
    // Aerial attack freeze 
      if (attack_a_timer &lt;= 0) {
        attack_a_timer = -1;
    } else {
        attack_a_timer -= 1;
    }
      
    
    // Collisions
    platform_collisions_step(object_solid)
    platform_collisions_step(object_dungeon_ground)
    platform_collisions_step(object_dungeon_stairs)
    platform_collisions_step(object_dungeon_slant)
        //Wall jump collision
        if (!place_free(x+1,y) || !place_free(x-1,y)) {
            wall_jump = false
            aerial_attack_executed = false
        }
    
    // --- Gravity when attacking in air, when attacking on ground, when jumping, in contact with a wall and on the floor, with animations ---
   
    // Found wood sword in chest
    if (object_chest_wood_sword.open) {
        gravity = 0
        hspeed = 0
        vspeed = 0
        sprite_index = moe_find_wood_sword
    }
    // If attacking and not wall jump
    else if (attack == true &amp;&amp; attack_a_timer != -1 &amp;&amp; place_free(x,y+1) &amp;&amp; wall_jump == false) {
        gravity = 0
        vspeed = 0
        hspeed = 0
    } else if (attack == true &amp;&amp; attack_a_timer != -1 &amp;&amp; place_free(x,y+1) &amp;&amp; wall_jump == true) {
        gravity = 0.8
    // If attacking on ground
    } else if (attack == true &amp;&amp; attack_timer != -1 &amp;&amp; !place_free(x,y+1)) {
        gravity = 0
        hspeed = 0
    }
    // If not touching ground
    else if (place_free(x,y+1)){
        gravity = 0.8;
            if D == "lef" {
                if place_free(x-2,y) {
                    if vspeed &lt;= 0 {
                        sprite_index = moe_jump_left
                    } else {sprite_index = moe_jump_descent_left}
                } else {sprite_index = moe_wall_grab_left}
            } else if D == "rig" {
                if place_free(x+2,y) {
                    if vspeed &lt;= 0 {
                        sprite_index = moe_jump_right
                    } else {sprite_index = moe_jump_descent_right}
                } else {sprite_index = moe_wall_grab_right}
            }
        // If touching wall
        if (!place_free(x+1,y) || !place_free(x-1,y)) &amp;&amp; (vspeed &gt; 0) {
            gravity = 0.1;
        }
    // If touching ground
    } else {
        gravity = 0;
        aerial_attack_executed = false
        if D == "rig" &amp;&amp; hspeed == 0 &amp;&amp; attack == false {
            sprite_index = moe_walk_r
        }
        else if D == "lef" &amp;&amp; hspeed == 0 &amp;&amp; attack == false {
            sprite_index = moe_walk_l
        }
    }
    
    // L/R movement and jumping
    if keyboard_check(ord('D')) &amp;&amp; attack == false
         {
         D = "rig"
         if place_free(x+1,y) {
            // Air movement
            if place_free(x,y+1) {
                if hspeed &lt;= 4 {
                    hspeed += 1
                }
            // Ground movement
            } else {
                hspeed = 4;
                sprite_index = moe_run_r
            }
        } if !place_free(x+2,y) &amp;&amp; !place_free(x,y+1) {
            sprite_index = moe_walk_r
        }
    }
    
    if keyboard_check(ord('A'))  &amp;&amp; attack == false
         {
         D = "lef"
         if place_free(x-1,y) {
             // Air movement
            if place_free(x,y+1) {
                if hspeed &gt;= -4 {
                    hspeed -= 1;
                }
            // Ground movement
            } else {
                hspeed = -4;
                sprite_index = moe_run_l
            }
        } if !place_free(x-2,y) &amp;&amp; !place_free(x,y+1) {
            sprite_index = moe_walk_l
        }
    }
    
    // Jump
    if keyboard_check_pressed(ord('W')) {
        // Wall jump
        if place_free(x,y+1) &amp;&amp; place_free(x,y-1) {
            if !place_free(x+1,y) {
                vspeed = -10
                hspeed = -6
                D = "lef"
                wall_jump = true
                wall_r_jump_timer = 15;
            }
            if !place_free(x-1,y) {
                vspeed = -10
                hspeed = 6
                D = "rig"
                wall_jump = true
                wall_l_jump_timer = 15;
            }
            // Normal jump
        } else {
            if !place_free(x,y+1) &amp;&amp; place_free(x,y-1) {
                vspeed = -10
            }
        }
    }
    
    // Static friction
    if ((!keyboard_check(ord('D'))) &amp;&amp; (!keyboard_check(ord('A')))) {
        platform_friction(1,true);
    } else {
        platform_friction(1,false);
    }
    
    // Sword attack
    
    if fight {
    
        // Right
        if keyboard_check_pressed(vk_right) {
            if (attack_timer &lt;= 1 &amp;&amp; place_free(x+1,y) ) {
                D = "rig"
                attack = true
                damage = true
                attack_timer = attack_interval
                attack_animation++
                if (attack_a_timer == -1 &amp;&amp; aerial_attack_executed == false &amp;&amp; place_free(x,y+1)) {
                    attack_a_timer = attack_a_interval
                    aerial_attack_executed = true
                }
                //if attack_a_timer != -1 { 
                    if (attack_animation mod 3 == 0) {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[0]
                        } else if (attack_a_timer != -1) {sprite_index = attack_ani[6]}
                    } else if  (attack_animation mod 3 == 1) {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[2]
                        } else if (attack_a_timer != -1) {sprite_index = attack_ani[8]}
                    } else {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[4]
                        } else if (attack_a_timer != -1) {sprite_index = attack_ani[6]}
                    }
                //}
            }
        }
        // Left
        if keyboard_check_pressed(vk_left) {
            if (attack_timer &lt;= 1 &amp;&amp; place_free(x-1,y) ) {
                D = "lef"
                attack = true
                damage = true
                attack_timer = attack_interval
                attack_animation++
                if (attack_a_timer == -1 &amp;&amp; aerial_attack_executed == false &amp;&amp; place_free(x,y+1)) {
                    attack_a_timer = attack_a_interval
                    aerial_attack_executed = true
                }
                //if attack_a_timer != -1 { 
                    if (attack_animation mod 3 == 0) {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[1]
                        } else if (attack_a_timer != -1) {sprite_index = attack_ani[7]}
                    } else if (attack_animation mod 3 == 1) {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[3]
                        } else if (attack_a_timer != -1) {sprite_index = attack_ani[9]}
                    } else {
                        if !(place_free(x,y+1)) {
                            sprite_index = attack_ani[5]
                        } else if (attack_a_timer != -1){sprite_index = attack_ani[7]}
                    }
                //}
            }
        }
    }
    
    if keyboard_check_pressed(vk_space) {
        action = true
    } else {action = false}
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
